/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
//package sdt;

/**
 *
 * @author suresh
 */
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
//package javaide;

import java.awt.Color;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Enumeration;
import java.util.Locale;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.text.DefaultEditorKit;
import javax.swing.text.DefaultHighlighter;
import javax.swing.text.Document;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.tools.Diagnostic;
import javax.tools.DiagnosticListener;
import javax.tools.JavaCompiler;
import javax.tools.StandardJavaFileManager;
import javax.tools.StandardLocation;
import javax.tools.ToolProvider;
import org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;
import org.fife.ui.rsyntaxtextarea.SyntaxConstants;
import org.fife.ui.rtextarea.RTextScrollPane;

/**
 *
 * @author AL
 */
public class JavaIDEForm extends javax.swing.JFrame {

    /**
     * Creates new form JavaIDEForm
     */
    public JavaIDEForm() {
        JFileChooser fc = new JFileChooser();
        fc.setDialogTitle("Choose Workspace");
        fc.setAcceptAllFileFilterUsed(false);
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int returnVal = fc.showOpenDialog(this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File sfile = fc.getSelectedFile();
            JTreeVar = sfile.getAbsolutePath();
            rootPath = JTreeVar;

        }
        if (JTreeVar == null) {
            System.exit(1);
        }
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        SrcPopUp = new javax.swing.JPopupMenu();
        newPackage = new javax.swing.JMenuItem();
        PackagePopUp = new javax.swing.JPopupMenu();
        newPopFile = new javax.swing.JMenuItem();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        console = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        editor = new javax.swing.JTextArea();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        fileManager = new javax.swing.JTree();
        jMenuBar1 = new javax.swing.JMenuBar();
        file = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        newFile = new javax.swing.JMenuItem();
        newProject = new javax.swing.JMenuItem();
        open = new javax.swing.JMenuItem();
        save = new javax.swing.JMenuItem();
        close = new javax.swing.JMenuItem();
        edit = new javax.swing.JMenu();
        cut = new javax.swing.JMenuItem(new DefaultEditorKit.CutAction());
        copy = new javax.swing.JMenuItem(new DefaultEditorKit.CopyAction());
        paste = new javax.swing.JMenuItem(new DefaultEditorKit.PasteAction());
        jMenu2 = new javax.swing.JMenu();
        compile = new javax.swing.JMenuItem();
        run = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        find = new javax.swing.JMenuItem();
        findReplace = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        setRunConfig = new javax.swing.JMenuItem();

        SrcPopUp.setFont(new java.awt.Font("Lucida Grande", 0, 12)); // NOI18N

        newPackage.setText("New Package");
        newPackage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newPackageActionPerformed(evt);
            }
        });
        SrcPopUp.add(newPackage);

        PackagePopUp.setFont(new java.awt.Font("Lucida Grande", 0, 12)); // NOI18N

        newPopFile.setText("New File");
        newPopFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newPopFileActionPerformed(evt);
            }
        });
        PackagePopUp.add(newPopFile);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        console.setColumns(20);
        console.setRows(5);
        jScrollPane4.setViewportView(console);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 463, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Console", jPanel1);

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane5.setViewportView(jTextArea2);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 463, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Compiler Messages", jPanel2);

        RSyntaxTextArea jtext = new RSyntaxTextArea();
        jtext.setCodeFoldingEnabled(true);
        jtext.setAntiAliasingEnabled(true);
        jtext.setAutoIndentEnabled(true);
        jtext.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_JAVA);
        editor = jtext;
        editor.setColumns(20);
        editor.setRows(5);
        editor.setBorder(javax.swing.BorderFactory.createTitledBorder("Editor"));
        RTextScrollPane jscroll = new RTextScrollPane(jtext);
        jScrollPane3 = jscroll;
        editor.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                editorKeyPressed(evt);
            }
        });
        jScrollPane3.setViewportView(editor);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 490, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 335, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 329, Short.MAX_VALUE)))
        );

        jScrollPane1.setViewportBorder(javax.swing.BorderFactory.createTitledBorder("Project Explorer"));

        fileManager.setDragEnabled(true);
        fileManager.setEditable(true);
        fileManager.setRootVisible(false);
        fileManager.setName("File Manager"); // NOI18N
        FileExplorer fileExplorer = new FileExplorer(new File(JavaIDEForm.JTreeVar));
        DefaultMutableTreeNode root = fileExplorer.processRootPath();

        Enumeration e=root.depthFirstEnumeration();
        while(e.hasMoreElements()){
            System.out.print(e.nextElement() + " - ");
        }
        DefaultTreeModel model;
        model = new DefaultTreeModel(root);
        fileManager.setModel(model);

        //new JTree(root);
        fileManager.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fileManagerMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(fileManager);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1))
        );

        file.setText("File");

        jMenu3.setText("New");

        newFile.setText("File");
        newFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newFileActionPerformed(evt);
            }
        });
        jMenu3.add(newFile);

        newProject.setText("Project");
        newProject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newProjectActionPerformed(evt);
            }
        });
        jMenu3.add(newProject);

        file.add(jMenu3);

        open.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        open.setText("Open");
        open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openActionPerformed(evt);
            }
        });
        file.add(open);

        save.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        save.setText("Save");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });
        file.add(save);

        close.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        close.setText("Close");
        close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeActionPerformed(evt);
            }
        });
        file.add(close);

        jMenuBar1.add(file);

        edit.setText("Edit");

        cut.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        cut.setText("Cut");
        cut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cutActionPerformed(evt);
            }
        });
        edit.add(cut);

        copy.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        copy.setText("Copy");
        edit.add(copy);

        paste.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        paste.setText("Paste");
        edit.add(paste);

        jMenuBar1.add(edit);

        jMenu2.setText("Build");

        compile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F6, java.awt.event.InputEvent.SHIFT_MASK));
        compile.setText("Compile");
        compile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compileActionPerformed(evt);
            }
        });
        jMenu2.add(compile);

        run.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F5, 0));
        run.setText("Run");
        run.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runActionPerformed(evt);
            }
        });
        jMenu2.add(run);

        jMenuBar1.add(jMenu2);

        jMenu4.setText("Find");

        find.setText("Find");
        find.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findActionPerformed(evt);
            }
        });
        jMenu4.add(find);

        findReplace.setText("Find & Replace");
        findReplace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findReplaceActionPerformed(evt);
            }
        });
        jMenu4.add(findReplace);

        jMenuBar1.add(jMenu4);

        jMenu1.setText("Run Configuration");

        setRunConfig.setText("Set Run Config");
        setRunConfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setRunConfigActionPerformed(evt);
            }
        });
        jMenu1.add(setRunConfig);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTabbedPane1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(3, 3, 3)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void fileManagerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fileManagerMouseClicked
        if (fileManager.getSelectionPath() != null) {
            JTreeVar = fileManager.getSelectionPath().toString().replaceAll("[\\[\\]]", "").replace(", ", "//");
            //JTreeVar = fileManager.getSelectionPath().toString();
        }
        System.out.println("JtreeVar: " + JTreeVar);
        File selection = new File(JTreeVar);

        if (selection.exists()) {
            if (new File(JTreeVar).isDirectory()) {
                if (SwingUtilities.isRightMouseButton(evt)) {
                    if (new File(JTreeVar).getName().equals("src")) {
                        SrcPopUp.show(evt.getComponent(), evt.getX(), evt.getY());
                    } else if (new File(JTreeVar).getParent().substring(new File(JTreeVar).getParent().lastIndexOf(File.separator) + 1).equals("src")) {
                        PackagePopUp.show(evt.getComponent(), evt.getX(), evt.getY());
                    }
                }
            } else if (JTreeVar.contains(".java")) {
                try {
                    System.out.println("setPage");
                    editor.setText(null);
                    BufferedReader in = new BufferedReader(new FileReader(selection));
                    String line = in.readLine();
                    while (line != null) {
                        editor.append(line + "\n");
                        line = in.readLine();
                    }
                } catch (IOException e) {
                    //e.printStackTrace();
                }
            }
        }
    }//GEN-LAST:event_fileManagerMouseClicked

    private void closeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeActionPerformed
        System.exit(0);
    }//GEN-LAST:event_closeActionPerformed

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        try {
            try (FileWriter saveFile = new FileWriter(JTreeVar)) {
                saveFile.write(editor.getText());
            }
        } catch (IOException e) {
            // e.printStackTrace();
        }
    }//GEN-LAST:event_saveActionPerformed

    private void openActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openActionPerformed
        JFileChooser fc = new JFileChooser();
        int returnVal = fc.showOpenDialog(this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File sFile = fc.getSelectedFile();
            JTreeVar = sFile.getAbsolutePath();
            //fileManager.setModel(new FileSystemModel(new File(JTreeVar)));
            //This is where a real application would open the file.
            File selection = new File(JTreeVar);
            if (selection.exists()) {
                if (JTreeVar.contains(".java")) {
                    try {
                        BufferedReader in = new BufferedReader(new FileReader(selection));
                        String line = in.readLine();
                        while (line != null) {
                            editor.append(line + "\n");
                            line = in.readLine();
                        }
                    } catch (Exception e) {
                    }
                }
            }
            System.out.println("Opening: " + file.getName() + ".");
        } else {
            System.out.println("Open command cancelled by user.");
        }
    }//GEN-LAST:event_openActionPerformed

    private void cutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cutActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cutActionPerformed

    private void compileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_compileActionPerformed
        // TODO add your handling code here:
        JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();
        // Line 1.
        MyDiagnosticListener listener = new MyDiagnosticListener(); // Line 2.
        jTextArea2.setText(null);
        StandardJavaFileManager fileManager; // Line 3.
        fileManager = compiler.getStandardFileManager(listener, null, null);
        String fileToCompile = null;
        if (JTreeVar.contains(".java")) {
            try {
                fileToCompile = JTreeVar;
                String classFolder = fileToCompile.replace("src", "class");
                classFolder = classFolder.substring(0, classFolder.lastIndexOf("class/") + 5);
                System.out.println("classFolder" + classFolder);
                // Line 4
                new File(classFolder).mkdirs();
                fileManager.setLocation(StandardLocation.CLASS_OUTPUT, Arrays.asList(new File(classFolder)));

                ArrayList<String> listOfFiles = new ArrayList<String>();
                listOfFiles = findAllFilesInProject();

                for (int i = 0; i < listOfFiles.size(); i++) {
                    System.out.println(listOfFiles.get(i));
                }

                Iterable fileObjects = fileManager.getJavaFileObjectsFromStrings(listOfFiles);
                //Iterable fileObjects =fileManager.getJavaFileObjectsFromStrings(Arrays.asList(fileToCompile));  // Line 5
                JavaCompiler.CompilationTask task = compiler.getTask(null, fileManager, listener, null, null, fileObjects); // Line 6
                Boolean result = task.call(); // Line 7
                if (result == true) {
                    jTextArea2.setForeground(Color.green);
                    jTextArea2.setText("Compilation Successful");
                    /*try {
                     Process pro2 = Runtime.getRuntime().exec("mv " + JTreeVar.substring(0, JTreeVar.lastIndexOf('.')) + ".class " + JTreeVar.substring(0, JTreeVar.lastIndexOf("/src/")) + "/class");
                     } catch (IOException ex) {
                     Logger.getLogger(JavaIDEForm.class.getName()).log(Level.SEVERE, null, ex);
                     }*/
                }
            } catch (IOException ex) {
               // Logger.getLogger(JavaIDEForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Invalid file. \nPlease choose a .java file to compile.");
        }

        refreshJTree();
    }//GEN-LAST:event_compileActionPerformed

    private void editorKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_editorKeyPressed
        // TODO add your handling code here:
        editor.getHighlighter().removeAllHighlights();
    }//GEN-LAST:event_editorKeyPressed

    private void runActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runActionPerformed
        // TODO add your handling code here:
        int option = JOptionPane.showConfirmDialog(this, "Do u want to use existing config?", "Run Config", JOptionPane.YES_NO_OPTION);
        //System.out.println("option "+option);
        String runPath = null;
        String cmdLineArgs = null;
        //use existing runpath
        if (option == 1) {
            setRunConfigActionPerformed(null);
        }
        String filePath = null;
        try {
            System.out.println("JTree in run " +JTreeVar);
            if (JTreeVar != null) {
                if (JTreeVar.indexOf("//src") == -1) {
                    if (JTreeVar.indexOf("//class") == -1) {
                        filePath = JTreeVar +"//proj.config";
                    } else {
                        filePath = JTreeVar.substring(0, JTreeVar.indexOf("//class")) + "//proj.config";
                    }
                } else {
                    filePath = JTreeVar.substring(0, JTreeVar.indexOf("//src")) + "//proj.config";
                }

                BufferedReader br = new BufferedReader(new FileReader(filePath));
                runPath = br.readLine();
                System.out.println("Run Path "+runPath);
                cmdLineArgs = br.readLine();
            }
            if (runPath != null) {
                //change here for fixing execution inside packages
                String tempPath = runPath;
                if (tempPath.contains(File.separator+"default"+File.separator)) {
                    runPath = runPath.substring(0, runPath.lastIndexOf(File.separator+"src"+File.separator)) + File.separator+"class " + runPath.substring(runPath.lastIndexOf(File.separator) + 1, runPath.lastIndexOf('.'));

                } else {
                    System.out.println(tempPath);
                    runPath = tempPath.substring(0, tempPath.lastIndexOf(File.separator+"src"+File.separator)) + File.separator+"class " + tempPath.substring(tempPath.lastIndexOf(File.separator+"src"+File.separator) + 5, tempPath.lastIndexOf(File.separator)) + "." + tempPath.substring(tempPath.lastIndexOf(File.separator) + 1, tempPath.lastIndexOf('.'));
                }
            }
        } catch (FileNotFoundException ex) {
            //Logger.getLogger(JavaIDEForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            //Logger.getLogger(JavaIDEForm.class.getName()).log(Level.SEVERE, null, ex);
        }

        Process pro2 = null;
        console.setText(null);
        if (runPath != null) {
            try {
                //String runPath = JTreeVar.substring(0, JTreeVar.lastIndexOf("/src/")) + "/class " + JTreeVar.substring(JTreeVar.lastIndexOf('/') + 1, JTreeVar.lastIndexOf('.'));

                System.out.println("RunPath: " + runPath);
                pro2 = Runtime.getRuntime().exec("java -cp " + runPath + " " + cmdLineArgs);
                pro2.waitFor();
                System.out.println("Exit Value: " + pro2.exitValue());
            } catch (IOException ex) {
                //Logger.getLogger(LineNumber.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InterruptedException ex) {
                //Logger.getLogger(JavaIDEForm.class.getName()).log(Level.SEVERE, null, ex);
            }
            BufferedReader in = null;
            BufferedReader inE = null;
            BufferedReader inR = null;
            if (pro2.exitValue() == 0) {
                in = new BufferedReader(new InputStreamReader(pro2.getInputStream()));
                inE = new BufferedReader(new InputStreamReader(pro2.getErrorStream()));
            } else {
                inR = new BufferedReader(new InputStreamReader(pro2.getErrorStream()));
            }
            String line = null;
            try {
                if (pro2.exitValue() == 0) {
                    while ((line = in.readLine()) != null) {
                        console.setForeground(Color.BLACK);
                        console.append(line + "\n");
                    }
                    while ((line = inE.readLine()) != null) {
                        console.setForeground(Color.BLACK);
                        console.append("System Error: " + line + "\n");
                    }
                } else {
                    while ((line = inR.readLine()) != null) {
                        console.setForeground(Color.RED);
                        console.append(line + "\n");
                    }
                }
            } catch (IOException ex) {
               // Logger.getLogger(LineNumber.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(this, "RunConfig is empty.");
        }
        /*catch(NullPointerException e){
         System.out.println("Null pointer Exception");
         }*/

    }//GEN-LAST:event_runActionPerformed

    private void newFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newFileActionPerformed
        // TODO add your handling code here:
        String newFileName = JOptionPane.showInputDialog("File Name");
        String[] projList;

        File[] child = new File(rootPath).listFiles();
        projList = new String[child.length];

        int j = 0;
        for (int i = 0; i < child.length; i++) {
            if (child[i].isDirectory()) {
                projList[j] = child[i].getName();
                j++;
            }
        }

        String projName = (String) JOptionPane.showInputDialog(this, "Project Name", "Choose Project", JOptionPane.PLAIN_MESSAGE, null, projList, null);

        if (newFileName.contains(" ")) {
            newFileName = newFileName.substring(0, newFileName.indexOf(" "));
        }
        if (newFileName.contains(".")) {
            newFileName = newFileName.substring(0, newFileName.indexOf("."));
        }
        if (new File((rootPath + "/" + projName + "/src/default/" + newFileName + ".java")).exists()) {
            JOptionPane.showMessageDialog(this, "File already exists.");
        } else {
            try {
                boolean result = new File(rootPath + "/" + projName + "/src/default/" + newFileName + ".java").createNewFile();
                FileWriter f = new FileWriter(rootPath + "/" + projName + "/src/default/" + newFileName + ".java");
                f.write("class " + newFileName + "{" + "\n}");
                f.close();

                refreshJTree();
            } catch (IOException ex) {
                //Logger.getLogger(JavaIDEForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_newFileActionPerformed

    private void newProjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newProjectActionPerformed
        // TODO add your handling code here:
        String newProjName = JOptionPane.showInputDialog("New Project");
        if (newProjName.contains(" ")) {
            newProjName = newProjName.substring(0, newProjName.indexOf(" "));
        }
        if (newProjName.contains(".")) {
            newProjName = newProjName.substring(0, newProjName.indexOf("."));
        }
        if (new File((rootPath + "/" + newProjName)).exists()) {
            JOptionPane.showMessageDialog(this, "Project already exists.");
        } else {
            boolean result = new File(rootPath + "/" + newProjName).mkdir();
            if (result) {
                new File(rootPath + "/" + newProjName + "/" + "src").mkdir();
                new File(rootPath + "/" + newProjName + "/src/default").mkdir();
                new File(rootPath + "/" + newProjName + "/" + "class").mkdir();
                try {
                    new File(rootPath + "/" + newProjName + "/" + "proj.config").createNewFile();
                } catch (IOException ex) {
                    //Logger.getLogger(JavaIDEForm.class.getName()).log(Level.SEVERE, null, ex);
                }

                refreshJTree();
            } else {
                System.out.println("Directory not created.");
            }
        }
    }//GEN-LAST:event_newProjectActionPerformed

    private void newPackageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newPackageActionPerformed
        // TODO add your handling code here:
        String newPkgName = JOptionPane.showInputDialog("Package Name");
        if (newPkgName.contains(" ")) {
            newPkgName = newPkgName.substring(0, newPkgName.indexOf(" "));
        }
        if (newPkgName.contains(".")) {
            newPkgName = newPkgName.substring(0, newPkgName.indexOf("."));
        }
        new File(JTreeVar + "/" + newPkgName).mkdir();

        refreshJTree();
    }//GEN-LAST:event_newPackageActionPerformed

    private void newPopFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newPopFileActionPerformed
        // TODO add your handling code here:
        String newFileName = JOptionPane.showInputDialog("File Name");
        if (newFileName.contains(" ")) {
            newFileName = newFileName.substring(0, newFileName.indexOf(" "));
        }
        if (newFileName.contains(".")) {
            newFileName = newFileName.substring(0, newFileName.indexOf("."));
        }
        try {
            boolean result = new File(JTreeVar + "/" + newFileName + ".java").createNewFile();
            FileWriter f = new FileWriter(JTreeVar + "/" + newFileName + ".java");
            String pkgName = JTreeVar.substring(JTreeVar.lastIndexOf('/') + 1);
            if (!pkgName.equals("default")) {
                f.write("package " + pkgName + ";\n\n");
            }
            f.write("class " + newFileName + "{" + "\n\n}");
            f.close();

            refreshJTree();
        } catch (IOException ex) {
            //Logger.getLogger(JavaIDEForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_newPopFileActionPerformed

    private void setRunConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setRunConfigActionPerformed
        String[] projList;

        File[] child = new File(rootPath).listFiles();
        projList = new String[1000];

        int j = 0;
        for (int i = 0; i < child.length; i++) {
            if (child[i].isDirectory()) {
                projList[j] = child[i].getName();
                j++;
            }
        }
        String projName = (String) JOptionPane.showInputDialog(this, "Project Name", "Choose Project", JOptionPane.PLAIN_MESSAGE, null, projList, null);
        if (projName != null) {
            String projPath = rootPath + "/" + projName + "/src";

            ArrayList<String> fileList = new ArrayList<String>();
            ArrayList<String> filePathList = new ArrayList<String>();

            fileList = getFilesInDirectory(new File(projPath), fileList);
            filePathList = (ArrayList<String>) fileList.clone();

            String filePath = null;
            for (int i = 0; i < fileList.size(); i++) {
                fileList.set(i, (String) new File(fileList.get(i)).getName());
            }
            String fileName = (String) JOptionPane.showInputDialog(this, "Choose File containing Main method", "Choose File", JOptionPane.PLAIN_MESSAGE, null, fileList.toArray(), null);
            for (int i = 0; i < filePathList.size(); i++) {
                if (filePathList.get(i).endsWith(fileName)) {
                    filePath = filePathList.get(i);
                }
            }
            if (filePath != null) {
                String commandLineArgs = JOptionPane.showInputDialog(this, "Command Line Arguments separated by ' '");

                try {
                    File file = new File(rootPath + File.separator + projName + File.separator+"proj.config");
                    BufferedWriter output = new BufferedWriter(new FileWriter(file));
                    output.write(filePath + "\n");
                    output.write(commandLineArgs);
                    output.close();
                    System.out.println("Written to file");
                } catch (IOException ex) {
                    //Logger.getLogger(JavaIDEForm.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                System.out.println("Main file path not set");
            }
        }
    }//GEN-LAST:event_setRunConfigActionPerformed

    private void findActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findActionPerformed
        pos1 = 0;
        JFrame find = new JFrame("Find");
        find.setLayout(new GridBagLayout());
        GridBagConstraints gb = new GridBagConstraints();
        JLabel text = new JLabel("Enter the word to find");
        gb.gridx = 0;
        gb.gridy = 0;
        final JTextField word = new JTextField();
        word.setColumns(20);
        JButton f = new JButton("Find Next");
        find.add(text, gb);
        gb.gridx = 1;
        gb.gridy = 0;
        find.add(word, gb);
        gb.gridx = 0;
        gb.gridy = 1;
        find.add(f, gb);
        find.setSize(500, 200);
        find.setVisible(true);
        f.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    DefaultHighlighter.DefaultHighlightPainter high = new DefaultHighlighter.DefaultHighlightPainter(Color.CYAN);
                    Document doc = editor.getDocument();
                    String text = doc.getText(0, doc.getLength());
                    if ((pos1 = text.indexOf(word.getText(), pos1)) >= 0) {
                        editor.getHighlighter().addHighlight(pos1, pos1 + word.getText().length(), high);
                        pos1 += word.getText().length();
                    }
                } catch (Exception ee) {
                }
            }

        });
    }//GEN-LAST:event_findActionPerformed

    private void findReplaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findReplaceActionPerformed
        pos2=0;
        isFindPressed=false;
        JFrame findAndReplace=new JFrame("Find And Replace");
        findAndReplace.setLayout(new GridBagLayout());
        GridBagConstraints gb=new GridBagConstraints();
        JLabel textt=new JLabel("Enter the word to find");
        JLabel replaceText=new JLabel("Replace with");
        gb.gridx=0;
        gb.gridy=0;
        final JTextField replace=new JTextField();
        replace.setColumns(20);
        final JTextField word=new JTextField();
        word.setColumns(20);
        JButton f=new JButton("Replace");
        JButton ff=new JButton("Find Next");
        findAndReplace.add(textt,gb);
        gb.gridx=1;
        gb.gridy=0;
        findAndReplace.add(word,gb);
        gb.gridx=0;
        gb.gridy=1;
        findAndReplace.add(replaceText,gb);
        gb.gridx=1;
        gb.gridy=1;
        findAndReplace.add(replace,gb);
        gb.gridx=0;
        gb.gridy=2;
        findAndReplace.add(ff,gb);
        gb.gridx=1;
        gb.gridy=2;
        findAndReplace.add(f,gb);
        findAndReplace.setSize(500, 200);
        findAndReplace.setVisible(true);
        ff.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    isFindPressed=true;
                DefaultHighlighter.DefaultHighlightPainter high=new DefaultHighlighter.DefaultHighlightPainter(Color.CYAN);                               
                doc = editor.getDocument();      
                text = doc.getText(0, doc.getLength());
                if((pos2 = text.indexOf(word.getText(), pos2)) >= 0) {
                    editor.getHighlighter().addHighlight(pos2, pos2 + word.getText().length(),high);
                    }
                    } catch (Exception ee) {}
                    }
        });
        f.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if(isFindPressed){
                try {                              
                    editor.getHighlighter().removeAllHighlights();
                    editor.replaceRange(replace.getText(), pos2, pos2 + word.getText().length());
                    } catch (Exception ee) {}
                    }
                isFindPressed=false;
            }
                });
    }//GEN-LAST:event_findReplaceActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        /*
         try {
         for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
         if ("Nimbus".equals(info.getName())) {
         javax.swing.UIManager.setLookAndFeel(info.getClassName());
         break;
         }
         }
         } catch (ClassNotFoundException ex) {
         java.util.logging.Logger.getLogger(JavaIDEForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
         } catch (InstantiationException ex) {
         java.util.logging.Logger.getLogger(JavaIDEForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
         } catch (IllegalAccessException ex) {
         java.util.logging.Logger.getLogger(JavaIDEForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
         } catch (javax.swing.UnsupportedLookAndFeelException ex) {
         java.util.logging.Logger.getLogger(JavaIDEForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
         }*/
        //</editor-fold>

        try {
            UIManager.setLookAndFeel("org.jvnet.substance.SubstanceLookAndFeel");
            // UIManager.setLookAndFeel("com.seaglasslookandfeel.SeaGlassLookAndFeel");
        } catch (ClassNotFoundException | IllegalAccessException | InstantiationException | UnsupportedLookAndFeelException e) {
            //System.out.println("Exception at Look & Feel.");
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JavaIDEForm().setVisible(true);
            }
        });
    }

    private void refreshJTree() {
        FileExplorer fileExplorer = new FileExplorer(new File(JavaIDEForm.rootPath));
        DefaultMutableTreeNode root = fileExplorer.processRootPath();

        DefaultTreeModel model;
        model = new DefaultTreeModel(root);
        this.fileManager.setModel(model);
    }

    private ArrayList<String> findAllFilesInProject() {
        ArrayList<String> fileList = new ArrayList<String>();
        File directory = new File(JTreeVar.substring(0, JTreeVar.lastIndexOf("/src") + 4));
        fileList = getFilesInDirectory(directory, fileList);

        return fileList;
    }

    private ArrayList<String> getFilesInDirectory(File directory, ArrayList<String> fileList) {
        if (directory.isDirectory() && !directory.isHidden()) {
            File[] children = directory.listFiles();
            for (int i = 0; i < children.length; i++) {
                fileList = getFilesInDirectory(children[i], fileList);
            }
        } else {
            if (directory.isFile() && !directory.isHidden()) {
                if (directory.getName().contains(".java")) {
                    fileList.add(directory.getPath());
                }
            }
        }
        return fileList;
    }

    class MyDiagnosticListener implements DiagnosticListener {

        public void report(Diagnostic diagnostic) {
            DefaultHighlighter.DefaultHighlightPainter high;
            try {
                jTextArea2.setForeground(Color.red);
                //outputArea.setText(null);
                jTextArea2.append(diagnostic.getCode() + " : " + diagnostic.getKind() + "\n");
                jTextArea2.append("Line# " + diagnostic.getLineNumber() + " Column# " + diagnostic.getColumnNumber() + " in File " + diagnostic.getSource() + "\n");
                jTextArea2.append(diagnostic.getMessage(Locale.ENGLISH) + "\n");
                /*outputArea.append("Column Number->" + diagnostic.getColumnNumber()+ "\n");
                 outputArea.append("End Position->" + diagnostic.getEndPosition()+"\n");
                 outputArea.append("Kind->" + diagnostic.getKind()+"\n");
                 outputArea.append("Line Number->" + diagnostic.getLineNumber() +"\n");*/
                //Error Highlight
                int start = editor.getLineStartOffset((int) diagnostic.getLineNumber() - 1);
                int end = editor.getLineEndOffset((int) diagnostic.getLineNumber() - 1);
                high = new DefaultHighlighter.DefaultHighlightPainter(Color.cyan);
                editor.getHighlighter().addHighlight(start, end, high);

                /*outputArea.append("Message->"+ diagnostic.getMessage(Locale.ENGLISH) +"\n");
                 outputArea.append("Position->" + diagnostic.getPosition() + "\n");
                 outputArea.append("Source->" + diagnostic.getSource() + "\n");
                 outputArea.append("Start Position->" + diagnostic.getStartPosition() + "\n");
                 outputArea.append("\n");*/
                /*System.out.println("Code->" +  diagnostic.getCode());
                 System.out.println("Column Number->" + diagnostic.getColumnNumber());
                 System.out.println("End Position->" + diagnostic.getEndPosition());
                 System.out.println("Kind->" + diagnostic.getKind());
                 System.out.println("Line Number->" + diagnostic.getLineNumber());
                 // int start=jTextArea1.getLineStartOffset((int)diagnostic.getLineNumber()-1);
                 //int end=jTextArea1.getLineEndOffset((int)diagnostic.getLineNumber()-1);
                 //high=new DefaultHighlighter.DefaultHighlightPainter(Color.red);
                 //jTextArea1.getHighlighter().addHighlight(start, end, high);
                 System.out.println("Message->"+ diagnostic.getMessage(Locale.ENGLISH));
                 System.out.println("Position->" + diagnostic.getPosition());
                 System.out.println("Source" + diagnostic.getSource());
                 System.out.println("Start Position->" + diagnostic.getStartPosition());
                 System.out.println("\n");*/
            } catch (Exception e) {

            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPopupMenu PackagePopUp;
    private javax.swing.JPopupMenu SrcPopUp;
    private javax.swing.JMenuItem close;
    private javax.swing.JMenuItem compile;
    private javax.swing.JTextArea console;
    private javax.swing.JMenuItem copy;
    private javax.swing.JMenuItem cut;
    private javax.swing.JMenu edit;
    private javax.swing.JTextArea editor;
    private javax.swing.JMenu file;
    private javax.swing.JTree fileManager;
    private javax.swing.JMenuItem find;
    private javax.swing.JMenuItem findReplace;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JMenuItem newFile;
    private javax.swing.JMenuItem newPackage;
    private javax.swing.JMenuItem newPopFile;
    private javax.swing.JMenuItem newProject;
    private javax.swing.JMenuItem open;
    private javax.swing.JMenuItem paste;
    private javax.swing.JMenuItem run;
    private javax.swing.JMenuItem save;
    private javax.swing.JMenuItem setRunConfig;
    // End of variables declaration//GEN-END:variables
    static String JTreeVar = null;
    static String rootPath;
    
    static int pos1=0;
    static int pos2=0;
    static Document doc;
    static String text;
    static boolean isFindPressed=false;
}

